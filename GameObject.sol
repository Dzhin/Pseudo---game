
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

import "InterfaceGameObject.sol";
// This is class that describes you smart contract.
abstract contract GameObject is InterfaceGameObject {

    string private class;
    uint private hp;
    uint private attack;
    uint private defense;
    uint private curHp;
    string private description;
    
    modifier checkOwnerAndAccept {
  
        require(msg.pubkey() == tvm.pubkey(), 100);

		tvm.accept();
		_;
	}
    function toDie(address dest, uint128 value, bool bounce) internal pure checkOwnerAndAccept {   
        dest.transfer(value, bounce, 160);
    }

    function hurtYourself(uint v) virtual external override{
        tvm.accept();
        if (v<=defense) return;
        if (curHp<=v-defense){
            toDie(msg.sender, 666, true);
            return;
        }
        curHp-=v-defense;
    }
    function dieTogether(address dest, uint128 value, bool bounce)virtual external override;

    function setHp(uint v) internal{
        hp=v;
    }
    function getCurHp() public returns(uint){
        return curHp;
    }
    function setCurHp(uint v) internal{
        curHp=v;
    }
    function getHp() public returns(uint){
        return hp;
    }
    function setAttack(uint v) internal{
        attack=v;
    }
    function getAttack() public returns(uint){
        return attack;
    }
    function setDefense(uint v) internal{
        defense=v;
    }
    function getDefense() public returns(uint){
        return defense;
    }
    function setClass(string v) internal{
        class=v;
    }
    function getClass() public returns(string){
        return class;
    }
    function setDescription(string s) internal{
        description=s;
    }
    function getDescription() public returns(string){
        return description;
    }

}
