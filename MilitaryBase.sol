
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

import "GameObject.sol";
import "InterfaceGameObject.sol";


contract MilitaryBase is GameObject{
    
    mapping(uint=>InterfaceGameObject) baseWarriors;

    constructor() public {
        require(tvm.pubkey() != 0, 101);

        require(msg.pubkey() == tvm.pubkey(), 102);

        tvm.accept();

        setClass("База");
        setDefense(4);
        setDescription("Твоя база, которую нужно защитить любой ценой. Не может атаковать, но может создавать юнитов");
        setHp(5);
        setCurHp(5);
        setAttack(0);
    }
    function addMilitaryUnit(InterfaceGameObject militaryUnit) external {
        tvm.accept();
        uint i=0;
        while(baseWarriors.exists(i)){
            i++;
        }
        baseWarriors[i]=militaryUnit;
    }
    function deleteMilitaryUnit(InterfaceGameObject militaryUnit) external {
        require(baseWarriors.exists(0),105);
        tvm.accept();
        uint key=0;
        address tmp;
        optional (uint, InterfaceGameObject) NextUnit=baseWarriors.next(key);
        while (NextUnit.hasValue()){
            (key, tmp) = NextUnit.get();
            if(tmp==militaryUnit)
            {
                delete baseWarriors[key];
                break;
            }
            key++;
            NextUnit=baseWarriors.next(key);
    }
}
    function unitDestroy(InterfaceGameObject warrior,address dest, uint128 value, bool bounce) private{
        warrior.dieTogether(dest, value, bounce);
    }
    function dieTogether(address dest, uint128 value, bool bounce)virtual public override {
    
    }
    function allDestroy() private{
        uint i=0;
        InterfaceGameObject warrior;
        optional(uint, InterfaceGameObject) nextUnit=baseWarriors.nextOrEq(i);
        while(nextUnit.hasValue()){
            (i, warrior)=nextUnit.get();
            unitDestroy(baseWarriors[i],msg.sender, 666, true); 
            nextUnit=baseWarriors.next(i);
        }    
    }

    function hurtYourself(uint v) external override{
        tvm.accept();
        if (v<=getDefense()) return;
        if (getCurHp()<=v-getDefense()){
            allDestroy();
            toDie(msg.sender, 666, true);
            return;
        }
        setCurHp(getCurHp()-v+getDefense());
    }

}
